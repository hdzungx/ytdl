import os
import threading
from tkinter import Tk, Text, END, StringVar, filedialog, Listbox
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from tkinter.messagebox import showinfo, showerror
import requests
from googleapiclient.discovery import build
from yt_dlp import YoutubeDL
import json
from typing import Dict, List
from tkinter import messagebox
import pyperclip

class GoogleDriveTab:
    def __init__(self, parent):
        self.parent = parent
        self.API_KEY = None
        self.show_password = False
        
        # Main container with padding
        main_frame = ttk.Frame(parent, padding="20")
        main_frame.pack(fill="both", expand=True)
        
        # API Key section
        api_frame = ttk.LabelFrame(main_frame, text="C·∫•u h√¨nh API", padding="10")
        api_frame.pack(fill="x", pady=(0, 15))
        
        # API Key input container
        api_input_frame = ttk.Frame(api_frame)
        api_input_frame.pack(fill="x")
        
        # Left side - API Key input
        ttk.Label(api_input_frame, text="API Key:").pack(side="left", padx=5)
        self.api_key_entry = ttk.Entry(api_input_frame, width=40, show="*")  # Default to password mode
        self.api_key_entry.pack(side="left", padx=5)
        
        # Toggle password visibility button
        self.toggle_btn = ttk.Button(
            api_input_frame,
            text="üëÅ",  # Eye symbol
            style="secondary.TButton",
            width=3,
            command=self.toggle_password_visibility
        )
        self.toggle_btn.pack(side="left", padx=2)
        
        ttk.Button(
            api_input_frame,
            text="X√°c nh·∫≠n",
            style="info.TButton",
            command=self.confirm_api_key,
            width=10
        ).pack(side="left", padx=5)
        
        # Right side - File selection
        ttk.Button(
            api_input_frame, 
            text="Ch·ªçn file",
            style="primary.TButton",
            command=self.select_api_key_file,
            width=10
        ).pack(side="right", padx=5)
        
        self.selected_api_key_file = StringVar()
        ttk.Label(
            api_input_frame,
            textvariable=self.selected_api_key_file,
            style="info.TLabel",
        ).pack(side="right", padx=5)

        # Links input section with file input option
        input_frame = ttk.LabelFrame(main_frame, text="Li√™n k·∫øt Drive", padding="10")
        input_frame.pack(fill="both", expand=True, pady=(0, 15))
        
        # Buttons frame for URL input options
        url_buttons_frame = ttk.Frame(input_frame)
        url_buttons_frame.pack(fill="x", pady=(0, 5))
        
        ttk.Button(
            url_buttons_frame,
            text="D√°n t·ª´ Clipboard",
            style="info.TButton",
            command=self.paste_from_clipboard,
            width=18
        ).pack(side="left", padx=5)

        ttk.Button(
            url_buttons_frame,
            text="X√≥a URL",
            style="info.TButton",
            command=self.clear_input,
            width=18
        ).pack(side="left", padx=5)

        ttk.Button(
            url_buttons_frame,
            text="Nh·∫≠p t·ª´ file",
            style="info.TButton",
            command=self.load_urls_from_file,
            width=12
        ).pack(side="left", padx=5)
        
        self.url_file_label = ttk.Label(
            url_buttons_frame,
            text="",
            style="info.TLabel"
        )
        self.url_file_label.pack(side="left", padx=5)
        
        # Text area for links
        self.link_input = Text(
            input_frame,
            font=("Segoe UI", 10),
            height=8
        )
        self.link_input.pack(fill="both", expand=True, pady=5)
        
        # Folder selection and Download section
        action_frame = ttk.Frame(main_frame)
        action_frame.pack(fill="x", pady=(0, 15))
        
        # Folder selection
        ttk.Label(action_frame, text="Th∆∞ m·ª•c t·∫£i v·ªÅ:").pack(side="left", padx=5)
        self.output_folder = StringVar()
        ttk.Label(
            action_frame,
            textvariable=self.output_folder,
            style="info.TLabel"
        ).pack(side="left", padx=5, fill="x", expand=True)
        
        ttk.Button(
            action_frame,
            text="Ch·ªçn th∆∞ m·ª•c",
            style="secondary.TButton",
            command=self.select_folder,
            width=12
        ).pack(side="right", padx=5)

        # Download button
        ttk.Button(
            main_frame,
            text="B·∫Øt ƒë·∫ßu t·∫£i xu·ªëng",
            style="success.TButton",
            command=self.start_download,
            width=15
        ).pack(pady=(0, 15))

        # Progress section
        progress_frame = ttk.LabelFrame(main_frame, text="Ti·∫øn tr√¨nh", padding="10")
        progress_frame.pack(fill="both", expand=True)
        
        self.progress_list = Listbox(
            progress_frame,
            font=("Segoe UI", 9)
        )
        self.progress_list.pack(fill="both", expand=True, side="left")
        
        # Add scrollbar to progress list
        scrollbar = ttk.Scrollbar(progress_frame, orient="vertical", command=self.progress_list.yview)
        scrollbar.pack(side="right", fill="y")
        self.progress_list.config(yscrollcommand=scrollbar.set)

        # Status
        self.status = StringVar()
        ttk.Label(
            main_frame,
            textvariable=self.status,
            style="success.TLabel"
        ).pack(pady=5)

    def toggle_password_visibility(self):
        """Toggle between showing and hiding the API key"""
        self.show_password = not self.show_password
        self.api_key_entry.config(show="" if self.show_password else "*")
        self.toggle_btn.config(text="üëÅ" if self.show_password else "üëÅ")

    def confirm_api_key(self):
        """X√°c nh·∫≠n API key nh·∫≠p t·ª´ b√†n ph√≠m"""
        api_key = self.api_key_entry.get().strip()
        if api_key:
            self.API_KEY = api_key
            self.api_key_entry.config(show="*")  # Always switch to password mode after confirmation
            self.show_password = False
            self.toggle_btn.config(text="üëÅ")
            showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t API Key")
        else:
            showerror("L·ªói", "Vui l√≤ng nh·∫≠p API Key")

    def select_api_key_file(self):
        """Ch·ªçn file ch·ª©a API_KEY."""
        file_path = filedialog.askopenfilename(filetypes=[("JSON files", "*.json")])
        if file_path:
            self.selected_api_key_file.set(os.path.basename(file_path))
            self.API_KEY = self.load_api_key(file_path)

    def load_api_key(self, file_path):
        """ƒê·ªçc API_KEY t·ª´ file vƒÉn b·∫£n (file c√≥ th·ªÉ ch·ª©a b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng n√†o, ch·ªâ ch·ª©a API_KEY)."""
        try:
            # Ki·ªÉm tra n·∫øu file t·ªìn t·∫°i
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"File kh√¥ng t·ªìn t·∫°i: {file_path}")
            
            # Ki·ªÉm tra xem file c√≥ tr·ªëng hay kh√¥ng
            if os.path.getsize(file_path) == 0:
                raise ValueError("File r·ªóng.")

            # M·ªü v√† ƒë·ªçc n·ªôi dung file
            with open(file_path, 'r') as file:
                api_key = file.read().strip()  # ƒê·ªçc to√†n b·ªô n·ªôi dung v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
                
                if not api_key:
                    raise ValueError("File kh√¥ng ch·ª©a API_KEY h·ª£p l·ªá.")
                
                # G√°n API Key v√†o tr∆∞·ªùng nh·∫≠p li·ªáu
                self.api_key_entry.delete(0, END)
                self.api_key_entry.insert(0, api_key)
                self.api_key_entry.config(show="*")  # Always show as password after loading
                self.show_password = False
                self.toggle_btn.config(text="üëÅ")
                
                return api_key

        except (FileNotFoundError, ValueError) as e:
            # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
            showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc API_KEY t·ª´ file: {str(e)}")
            return None
        except Exception as e:
            # X·ª≠ l√Ω l·ªói kh√°c
            showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
            return None

    def paste_from_clipboard(self):
        # L·∫•y n·ªôi dung t·ª´ clipboard
        clipboard_content = pyperclip.paste()

        # D√°n n·ªôi dung t·ª´ clipboard v√†o Textbox v√† t·ª± ƒë·ªông xu·ªëng d√≤ng
        current_content = self.link_input.get("1.0", END)  # L·∫•y n·ªôi dung hi·ªán t·∫°i trong Textbox
        self.link_input.insert(END, clipboard_content + "\n")  # D√°n n·ªôi dung v√† th√™m xu·ªëng d√≤ng

    def clear_input(self):
        # X√≥a n·ªôi dung trong Textbox
        self.link_input.delete("1.0", END)

    def load_urls_from_file(self):
        """Load URLs from a text file."""
        file_path = filedialog.askopenfilename(
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    urls = file.read()
                    self.link_input.delete('1.0', END)
                    self.link_input.insert('1.0', urls)
                    self.url_file_label.config(text=f"ƒê√£ t·∫£i: {os.path.basename(file_path)}")
                    showinfo("Th√†nh c√¥ng", "ƒê√£ t·∫£i danh s√°ch li√™n k·∫øt t·ª´ file")
            except Exception as e:
                showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file: {str(e)}")

    def select_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.output_folder.set(os.path.basename(folder))
            self.output_folder.folder_path = folder

    def start_download(self):
        if not self.API_KEY:
            showerror("L·ªói", "Vui l√≤ng nh·∫≠p API Key ho·∫∑c ch·ªçn file ch·ª©a API Key.")
            return
        
        links = self.link_input.get("1.0", END).strip().split("\n")
        output_folder = getattr(self.output_folder, 'folder_path', None)

        if not links or not output_folder:
            showerror("L·ªói", "Vui l√≤ng nh·∫≠p li√™n k·∫øt v√† ch·ªçn th∆∞ m·ª•c t·∫£i v·ªÅ.")
            return

        self.status.set("ƒêang t·∫£i xu·ªëng...")
        threading.Thread(target=self.download_links, args=(links, output_folder)).start()

    def download_links(self, links, output_folder):
        total_folders = len([link for link in links if link.strip()])
        successful_downloads = 0
        failed_downloads = []

        for link in links:
            if not link.strip():  # Skip empty lines
                continue
                
            folder_id = self.extract_folder_id(link)
            if folder_id:
                try:
                    self.progress_list.insert(END, f"B·∫Øt ƒë·∫ßu t·∫£i th∆∞ m·ª•c: {link}")
                    self.progress_list.yview(END)
                    success = self.download_folder(folder_id, output_folder)
                    if success:
                        successful_downloads += 1
                        self.progress_list.insert(END, f"ƒê√£ t·∫£i xong: {link}")
                    else:
                        failed_downloads.append((link, "C√≥ l·ªói khi t·∫£i file trong th∆∞ m·ª•c"))
                except Exception as e:
                    failed_downloads.append((link, str(e)))
                    self.progress_list.insert(END, f"L·ªói khi t·∫£i th∆∞ m·ª•c: {link}\nL·ªói: {e}")
            else:
                failed_downloads.append((link, "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ID th∆∞ m·ª•c"))
                self.progress_list.insert(END, f"Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ID t·ª´ li√™n k·∫øt: {link}")

        # Show appropriate completion message based on results
        if failed_downloads:
            error_message = "M·ªôt s·ªë th∆∞ m·ª•c kh√¥ng t·∫£i ƒë∆∞·ª£c:\n\n"
            for link, error in failed_downloads:
                error_message += f"‚Ä¢ {link}: {error}\n"
            if successful_downloads > 0:
                error_message += f"\nƒê√£ t·∫£i th√†nh c√¥ng {successful_downloads}/{total_folders} th∆∞ m·ª•c."
            showerror("Ho√†n t·∫•t v·ªõi l·ªói", error_message)
        else:
            showinfo("Ho√†n t·∫•t", f"ƒê√£ t·∫£i th√†nh c√¥ng {successful_downloads} th∆∞ m·ª•c.")

        self.status.set("Ho√†n t·∫•t!")

    def download_folder(self, folder_id, output_folder):
        """T·∫£i xu·ªëng to√†n b·ªô n·ªôi dung th∆∞ m·ª•c."""
        service = build('drive', 'v3', developerKey=self.API_KEY)
        success = True
        
        def list_files_in_folder(folder_id):
            try:
                query = f"'{folder_id}' in parents and trashed = false"
                results = service.files().list(
                    q=query,
                    fields="files(id, name, mimeType)"
                ).execute()
                return results.get('files', [])
            except Exception as e:
                self.progress_list.insert(END, f"L·ªói khi l·∫•y danh s√°ch file: {str(e)}")
                return []

        def download_file(file_id, file_name, folder_path):
            try:
                url = f"https://www.googleapis.com/drive/v3/files/{file_id}?alt=media&key={self.API_KEY}"
                response = requests.get(url, stream=True)
                
                if response.status_code != 200:
                    self.progress_list.insert(END, f"L·ªói khi t·∫£i {file_name}: HTTP {response.status_code}")
                    return False

                file_path = os.path.join(folder_path, file_name)
                total_size = int(response.headers.get('content-length', 0))
                
                self.progress_list.insert(END, f"ƒêang t·∫£i: {file_name}")
                self.progress_list.yview(END)

                downloaded = 0
                with open(file_path, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                            downloaded += len(chunk)
                            if total_size > 0:
                                percent = (downloaded / total_size) * 100
                                speed = downloaded / (1024 * 1024)
                                status = f"ƒêang t·∫£i {file_name}: {percent:.1f}% - {speed:.1f} MB"
                                
                                last_index = self.progress_list.size() - 1
                                if last_index >= 0 and file_name in self.progress_list.get(last_index):
                                    self.progress_list.delete(last_index)
                                self.progress_list.insert(END, status)
                                self.progress_list.yview(END)

                self.progress_list.insert(END, f"ƒê√£ t·∫£i xong: {file_name}")
                self.progress_list.yview(END)
                return True

            except Exception as e:
                self.progress_list.insert(END, f"L·ªói khi t·∫£i {file_name}: {str(e)}")
                self.progress_list.yview(END)
                return False

        try:
            files = list_files_in_folder(folder_id)
            if not files:
                self.progress_list.insert(END, "Kh√¥ng t√¨m th·∫•y file n√†o trong th∆∞ m·ª•c")
                return False

            os.makedirs(output_folder, exist_ok=True)

            download_results = []
            for file in files:
                if file['mimeType'] == 'application/vnd.google-apps.folder':
                    subfolder_path = os.path.join(output_folder, file['name'])
                    os.makedirs(subfolder_path, exist_ok=True)
                    subfolder_success = self.download_folder(file['id'], subfolder_path)
                    download_results.append(subfolder_success)
                else:
                    file_success = download_file(file['id'], file['name'], output_folder)
                    download_results.append(file_success)

            # Return True only if all downloads were successful
            return all(download_results)

        except Exception as e:
            self.progress_list.insert(END, f"L·ªói khi t·∫£i th∆∞ m·ª•c: {str(e)}")
            self.progress_list.yview(END)
            return False

    @staticmethod
    def extract_folder_id(link):
        link = link.strip()
        folder_id = None
        
        if not link:
            return None
            
        try:
            # Pattern 1: /folders/FOLDER_ID
            if "drive.google.com/drive/folders/" in link:
                folder_id = link.split("/folders/")[1].split("?")[0].split("/")[0]
            
            # Pattern 2: /file/d/FOLDER_ID
            elif "drive.google.com/file/d/" in link:
                folder_id = link.split("/file/d/")[1].split("/")[0].split("?")[0]
            
            # Pattern 3: open?id=FOLDER_ID
            elif "drive.google.com/open?id=" in link:
                folder_id = link.split("open?id=")[1].split("&")[0]
            
            # Pattern 4: /u/0/folders/FOLDER_ID or /u/[NUMBER]/folders/FOLDER_ID
            elif "drive.google.com/drive/u/" in link and "/folders/" in link:
                folder_id = link.split("/folders/")[1].split("?")[0].split("/")[0]
            
            # Check if folder_id looks valid (typically 33 characters of letters, numbers, and special chars)
            if folder_id and len(folder_id) >= 25 and all(c.isalnum() or c in "-_" for c in folder_id):
                return folder_id
                
        except IndexError:
            return None
        return None

class YouTubeTab:
    def __init__(self, parent):
        self.parent = parent
        self.format_cache: Dict[str, List] = {}  # Cache for video formats
        self.current_format = StringVar()                

        # Main container
        main_frame = ttk.Frame(parent, padding="20")
        main_frame.pack(fill="both", expand=True)
        
        # Input section
        input_frame = ttk.LabelFrame(main_frame, text="Li√™n k·∫øt YouTube", padding="10")
        input_frame.pack(fill="both", expand=True, pady=(0, 15))
        
        # Buttons frame for URL input options
        url_buttons_frame = ttk.Frame(input_frame)
        url_buttons_frame.pack(fill="x", pady=(0, 5))
        
        ttk.Button(
            url_buttons_frame,
            text="Nh·∫≠p t·ª´ file",
            style="info.TButton",
            command=self.load_urls_from_file,
            width=12
        ).pack(side="left", padx=5)
        
        ttk.Button(
            url_buttons_frame,
            text="D√°n t·ª´ Clipboard",
            style="info.TButton",
            command=self.paste_from_clipboard,
            width=18
        ).pack(side="left", padx=5)

        ttk.Button(
            url_buttons_frame,
            text="X√≥a URL",
            style="info.TButton",
            command=self.clear_input,
            width=18
        ).pack(side="left", padx=5)

       # Format fetch button
        ttk.Button(
            url_buttons_frame,
            text="L·∫•y ƒë·ªãnh d·∫°ng",
            style="info.TButton",
            command=self.fetch_formats,
            width=12
        ).pack(side="left", padx=5)

        self.url_file_label = ttk.Label(
            url_buttons_frame,
            text="",
            style="info.TLabel"
        )
        self.url_file_label.pack(side="left", padx=5)
        
        self.link_input = Text(
            input_frame,
            font=("Segoe UI", 10),
            height=8
        )
        self.link_input.pack(fill="both", expand=True, pady=5)
       
        # Format selection frame
        format_frame = ttk.LabelFrame(main_frame, text="C·∫•u h√¨nh t·∫£i xu·ªëng", padding="10")
        format_frame.pack(fill="x", pady=(0, 15))

        # Format selection combobox
        format_select_frame = ttk.Frame(format_frame)
        format_select_frame.pack(fill="x", pady=5)
        
        ttk.Label(format_select_frame, text="ƒê·ªãnh d·∫°ng:").pack(side="left", padx=5)
        
        self.format_combobox = ttk.Combobox(
            format_select_frame, 
            textvariable=self.current_format,
            state="readonly",
            width=100
        )
        self.format_combobox.pack(side="left", padx=5, fill="x", expand=True)
        
        # Set placeholder text
        self.format_combobox['values'] = ["M·∫∑c ƒë·ªãnh: Video ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t. Vui l√≤ng nh·∫•n 'L·∫•y ƒë·ªãnh d·∫°ng' ƒë·ªÉ xem c√°c t√πy ch·ªçn kh√°c."]
        self.format_combobox.set("M·∫∑c ƒë·ªãnh: Video ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t. Vui l√≤ng nh·∫•n 'L·∫•y ƒë·ªãnh d·∫°ng' ƒë·ªÉ xem c√°c t√πy ch·ªçn kh√°c.")     

        # Folder selection
        folder_frame = ttk.Frame(main_frame)
        folder_frame.pack(fill="x", pady=(0, 15))
        
        ttk.Label(folder_frame, text="Th∆∞ m·ª•c t·∫£i v·ªÅ:").pack(side="left", padx=5)
        self.output_folder = StringVar()
        ttk.Label(
            folder_frame,
            textvariable=self.output_folder,
            style="info.TLabel"
        ).pack(side="left", padx=5, fill="x", expand=True)
        
        ttk.Button(
            folder_frame,
            text="Ch·ªçn th∆∞ m·ª•c",
            style="secondary.TButton",
            command=self.select_folder,
            width=12
        ).pack(side="right", padx=5)

        # Download button
        ttk.Button(
            main_frame,
            text="B·∫Øt ƒë·∫ßu t·∫£i xu·ªëng",
            style="success.TButton",
            command=self.start_download,
            width=15
        ).pack(pady=(0, 15))

        # Progress section
        progress_frame = ttk.LabelFrame(main_frame, text="Ti·∫øn tr√¨nh", padding="10")
        progress_frame.pack(fill="both", expand=True)
        
        self.progress_list = Listbox(
            progress_frame,
            font=("Segoe UI", 9)
        )
        self.progress_list.pack(fill="both", expand=True, side="left")
        
        # Add scrollbar to progress list
        scrollbar = ttk.Scrollbar(progress_frame, orient="vertical", command=self.progress_list.yview)
        scrollbar.pack(side="right", fill="y")
        self.progress_list.config(yscrollcommand=scrollbar.set)

    def paste_from_clipboard(self):
        # L·∫•y n·ªôi dung t·ª´ clipboard
        clipboard_content = pyperclip.paste()

        # D√°n n·ªôi dung t·ª´ clipboard v√†o Textbox v√† t·ª± ƒë·ªông xu·ªëng d√≤ng
        current_content = self.link_input.get("1.0", END)  # L·∫•y n·ªôi dung hi·ªán t·∫°i trong Textbox
        self.link_input.insert(END, clipboard_content + "\n")  # D√°n n·ªôi dung v√† th√™m xu·ªëng d√≤ng

    def clear_input(self):
        # X√≥a n·ªôi dung trong Textbox
        self.link_input.delete("1.0", END)

    def fetch_formats(self):
        # L·∫•y n·ªôi dung t·ª´ widget Text
        content = self.link_input.get("1.0", "end-1c")  # "1.0" l√† b·∫Øt ƒë·∫ßu t·ª´ d√≤ng ƒë·∫ßu ti√™n
        links = [link.strip() for link in content.splitlines() if link.strip()]  # T·∫°o danh s√°ch URL

        if len(links) > 1:
            # N·∫øu c√≥ nhi·ªÅu URL, h·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ti·∫øp t·ª•c t·∫£i t·∫•t c·∫£ v·ªõi ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t
            messagebox.showinfo(
                "Th√¥ng b√°o",
                "Ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ch·ªçn cho t·∫•t c·∫£ c√°c video khi b·∫°n nh·∫≠p nhi·ªÅu url"
            )
            return

        """Fetch available formats for the first video in the input"""
        url = self.link_input.get("1.0", "end-1c").split('\n')[0].strip()
        if not url:
            showerror("L·ªói", "Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt li√™n k·∫øt YouTube")
            return

        messagebox.showinfo(
            "Th√¥ng b√°o",
            "ƒêang l·∫•y dnh s√°ch ƒë·ªãnh d·∫°ng. Vui long ƒë·ª£i .... Vui l√≤ng nh·∫•n x√°c nh·∫≠n ƒë·ªÉ b·∫Øt ƒë·∫ßu!"
        )
        
        try:
            if url in self.format_cache:
                self.update_format_combobox(self.format_cache[url])
                return

            self.progress_list.insert(END, f"ƒêang l·∫•y danh s√°ch ƒë·ªãnh d·∫°ng cho: {url}")
            self.progress_list.yview(END)

            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
            }

            with YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                formats = info.get('formats', [])
                
                # Process formats with more detailed information
                format_list = []
                formats.reverse()  # Reverse to show highest quality first
                
                for f in formats:
                    # Get all relevant format information
                    format_id = f.get('format_id', 'N/A')
                    ext = f.get('ext', 'N/A')
                    resolution = f.get('resolution', 'N/A')
                    filesize = f.get('filesize', 0)
                    vcodec = f.get('vcodec', 'none')
                    acodec = f.get('acodec', 'none')
                    abr = f.get('abr', 0)  # Audio bitrate
                    vbr = f.get('vbr', 0)  # Video bitrate
                    fps = f.get('fps', 0)
                    
                    # Convert filesize to appropriate unit
                    if filesize > 0:
                        if filesize > 1024*1024*1024:
                            size_str = f"{filesize/(1024*1024*1024):.1f}GB"
                        else:
                            size_str = f"{filesize/(1024*1024):.1f}MB"
                    else:
                        size_str = "N/A"

                    # Create detailed format description
                    format_parts = []
                    format_parts.append(f"ID: {format_id}")
                    
                    # Video information
                    if vcodec != 'none':
                        format_parts.append(f"{resolution}")
                        if fps:
                            format_parts.append(f"{fps}fps")
                        if vbr:
                            format_parts.append(f"{vbr/1024:.1f}kbps")
                            
                    # Audio information
                    if acodec != 'none':
                        format_parts.append("Audio" if vcodec == 'none' else "+ Audio")
                        if abr:
                            format_parts.append(f"{abr}kbps")
                            
                    format_parts.extend([
                        f"[{ext}]",
                        f"({size_str})",
                        f"- {vcodec}" if vcodec != 'none' else "",
                        f"- {acodec}" if acodec != 'none' else ""
                    ])
                    
                    format_str = " ".join(filter(None, format_parts))
                    format_list.append(f"{format_str}")

                # Cache the formats
                self.format_cache[url] = format_list
                self.update_format_combobox(format_list)
                
                self.progress_list.insert(END, f"ƒê√£ t√¨m th·∫•y {len(format_list)} ƒë·ªãnh d·∫°ng")
                self.progress_list.yview(END)

        except Exception as e:
            self.progress_list.insert(END, f"L·ªói khi l·∫•y ƒë·ªãnh d·∫°ng: {str(e)}")
            self.progress_list.yview(END)

    def update_format_combobox(self, format_list):
        """Update the format combobox with new formats"""
        self.format_combobox['values'] = format_list
        if format_list:
            self.format_combobox.set(format_list[0])  # Select first format by default

    def select_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.output_folder.set(os.path.basename(folder))
            self.output_folder.folder_path = folder

    def load_urls_from_file(self):
        """Load URLs from a text file."""
        file_path = filedialog.askopenfilename(
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    urls = file.read()
                    self.link_input.delete('1.0', END)
                    self.link_input.insert('1.0', urls)
                    self.url_file_label.config(text=f"ƒê√£ t·∫£i: {os.path.basename(file_path)}")
                    showinfo("Th√†nh c√¥ng", "ƒê√£ t·∫£i danh s√°ch li√™n k·∫øt t·ª´ file")
            except Exception as e:
                showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file: {str(e)}")

    def start_download(self):
        links = [link.strip() for link in self.link_input.get("1.0", END).strip().split("\n") if link.strip()]
        output_folder = getattr(self.output_folder, 'folder_path', None)
        selected_format = self.current_format.get()

        if not links or not output_folder:
            showerror("L·ªói", "Vui l√≤ng nh·∫≠p li√™n k·∫øt v√† ch·ªçn th∆∞ m·ª•c t·∫£i v·ªÅ.")
            return

        if not selected_format or selected_format == "M·∫∑c ƒë·ªãnh: Video ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t. Vui l√≤ng nh·∫•n 'L·∫•y ƒë·ªãnh d·∫°ng' ƒë·ªÉ xem c√°c t√πy ch·ªçn kh√°c.":
            # N·∫øu kh√¥ng ch·ªçn ƒë·ªãnh d·∫°ng, t·∫£i video ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t
            format_id = 'best'
            # L·∫•y n·ªôi dung t·ª´ widget Text
            content = self.link_input.get("1.0", "end-1c")  # "1.0" l√† b·∫Øt ƒë·∫ßu t·ª´ d√≤ng ƒë·∫ßu ti√™n
            links = [link.strip() for link in content.splitlines() if link.strip()]  # T·∫°o danh s√°ch URL

            if len(links) > 1:
                # N·∫øu c√≥ nhi·ªÅu URL, h·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ti·∫øp t·ª•c t·∫£i t·∫•t c·∫£ v·ªõi ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t
                messagebox.showinfo(
                    "Th√¥ng b√°o",
                    "Ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t ƒë√£ ƒë∆∞·ª£c ch·ªçn cho t·∫•t c·∫£ c√°c video. ƒêang ti·∫øn h√†nh t·∫£i t·∫•t c·∫£ v·ªõi ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t."
                )
            else:
                # Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n
                result = messagebox.askyesno(
                    "Th√¥ng b√°o", 
                    "B·∫°n ƒëang t·∫£i video v·ªõi ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t! ƒê·ªÉ t·∫£i video ch·∫•t l∆∞·ª£ng t√πy ch·ªçn, vui l√≤ng ch·ªçn ƒë·ªãnh d·∫°ng video. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c t·∫£i video v·ªõi ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t?"
                )
                
                if not result:  # Ng∆∞·ªùi d√πng ch·ªçn "No"
                    messagebox.showinfo(
                        "Th√¥ng b√°o",
                        "ƒêang l·∫•y dnh s√°ch ƒë·ªãnh d·∫°ng. Vui long ƒë·ª£i .... Vui l√≤ng nh·∫•n x√°c nh·∫≠n ƒë·ªÉ b·∫Øt ƒë·∫ßu!"
                    )
                    self.fetch_formats()
                    # Quay l·∫°i y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªçn ƒë·ªãnh d·∫°ng
                    return
        else:
            # Extract format ID t·ª´ selected_format n·∫øu c√≥
            format_id = selected_format.split("ID: ")[1].split(" ")[0]

        threading.Thread(target=self.download_videos, args=(links, output_folder, format_id)).start()

    def download_videos(self, links, output_folder, format_id):
        ydl_opts = {
            'outtmpl': os.path.join(output_folder, '%(title)s.%(ext)s'),
            'progress_hooks': [self.progress_hook],
            'format': format_id,
            'merge_output_format': 'mp4' if not format_id.startswith('bestaudio') else 'm4a',
        }
        
        total_downloads = len(links)
        successful_downloads = 0
        failed_downloads = []
        
        with YoutubeDL(ydl_opts) as ydl:
            for link in links:
                try:
                    self.progress_list.insert(END, f"B·∫Øt ƒë·∫ßu t·∫£i video: {link}")
                    self.progress_list.yview(END)
                    ydl.download([link])
                    successful_downloads += 1
                    self.progress_list.insert(END, f"ƒê√£ t·∫£i xong: {link}")
                    self.progress_list.yview(END)
                except Exception as e:
                    failed_downloads.append((link, str(e)))
                    self.progress_list.insert(END, f"L·ªói khi t·∫£i {link}: {str(e)}")
                    self.progress_list.yview(END)

        # Show appropriate completion message based on results
        if failed_downloads:
            error_message = "M·ªôt s·ªë video kh√¥ng t·∫£i ƒë∆∞·ª£c:\n\n"
            for link, error in failed_downloads:
                error_message += f"‚Ä¢ {link}: {error}\n"
            if successful_downloads > 0:
                error_message += f"\nƒê√£ t·∫£i th√†nh c√¥ng {successful_downloads}/{total_downloads} video."
            showerror("Ho√†n t·∫•t v·ªõi l·ªói", error_message)
        else:
            showinfo("Ho√†n t·∫•t", f"ƒê√£ t·∫£i th√†nh c√¥ng {successful_downloads} video.")

        # Reset format combobox
        self.format_combobox['values'] = ["M·∫∑c ƒë·ªãnh: Video ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t. Vui l√≤ng nh·∫•n 'L·∫•y ƒë·ªãnh d·∫°ng' ƒë·ªÉ xem c√°c t√πy ch·ªçn kh√°c."]
        self.format_combobox.set("M·∫∑c ƒë·ªãnh: Video ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t. Vui l√≤ng nh·∫•n 'L·∫•y ƒë·ªãnh d·∫°ng' ƒë·ªÉ xem c√°c t√πy ch·ªçn kh√°c.")
    def progress_hook(self, d):
        if d['status'] == 'downloading':
            filename = d.get('filename', 'T·ªáp kh√¥ng x√°c ƒë·ªãnh').split('/')[-1]
            downloaded_bytes = d.get('downloaded_bytes', 0)
            total_bytes = d.get('total_bytes', 0) or d.get('total_bytes_estimate', 0)
            speed = d.get('speed', "Unknown")  # G√°n "Unknown" n·∫øu kh√¥ng c√≥ gi√° tr·ªã

            # Ki·ªÉm tra total_bytes
            if total_bytes == "Unknown" or not total_bytes:
                progress = 0
                total_str = "Unknown"
            else:
                progress = min((downloaded_bytes / total_bytes) * 100, 100)
                total_str = self._format_size(total_bytes)

            # ƒê·ªãnh d·∫°ng th√¥ng tin t·∫£i v·ªÅ
            downloaded_str = self._format_size(downloaded_bytes)
            speed_str = self._format_size(speed) + "/s" if speed != "Unknown" else "Unknown"

            # Th·ªùi gian ∆∞·ªõc t√≠nh (ETA)
            eta = d.get('eta', "Unknown")
            eta_str = self._format_eta(eta) if eta != "Unknown" else "ƒêang t√≠nh..."

            # ƒê·ªãnh d·∫°ng tr·∫°ng th√°i hi·ªÉn th·ªã
            status_text = f"ƒêang t·∫£i {filename}: {progress:.1f}% ({downloaded_str} / {total_str}) - T·ªëc ƒë·ªô: {speed_str} - {eta_str}"
            
            # Update only the last line if it's for the same file
            last_index = self.progress_list.size() - 1
            if last_index >= 0 and "ƒêang t·∫£i" in self.progress_list.get(last_index):
                self.progress_list.delete(last_index)
            
            self.progress_list.insert(END, status_text)
            self.progress_list.yview(END)

        elif d['status'] == 'finished':
            # Khi t·∫£i xong, hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh
            filename = d.get('filename', 'T·ªáp kh√¥ng x√°c ƒë·ªãnh').split('/')[-1]
            self.progress_list.insert(END, f"ƒê√£ t·∫£i xong: {filename}")
            self.progress_list.yview(END)

    def _format_size(self, bytes_or_unknown):
        if bytes_or_unknown == "Unknown" or not bytes_or_unknown:
            return "Unknown"
        bytes = bytes_or_unknown  # ƒê·∫£m b·∫£o bytes l√† s·ªë
        if bytes >= 1024 * 1024 * 1024:  # >= 1GB
            return f"{bytes / (1024 * 1024 * 1024):.2f}GB"
        return f"{bytes / (1024 * 1024):.2f}MB"

    def _format_eta(self, eta_or_unknown):
        if eta_or_unknown == "Unknown" or not eta_or_unknown:
            return "ƒêang t√≠nh..."
        eta = eta_or_unknown  # ƒê·∫£m b·∫£o eta l√† s·ªë
        eta_minutes = eta // 60
        eta_seconds = eta % 60
        return f"ETA: {eta_minutes:.0f} ph√∫t {eta_seconds:.0f} gi√¢y"

if __name__ == "__main__":
    root = ttk.Window(
        title="Download Tool",
        themename="cosmo",
        size=(1000, 700)
    )
    
    style = ttk.Style()
    style.configure("TLabelframe", borderwidth=1)
    
    notebook = ttk.Notebook(root)
    notebook.pack(fill="both", expand=True, padx=5, pady=5)

    youtube_tab_frame = ttk.Frame(notebook)
    drive_tab_frame = ttk.Frame(notebook)
    
    notebook.add(youtube_tab_frame, text="YouTube")
    notebook.add(drive_tab_frame, text="Google Drive")
    
    YouTubeTab(youtube_tab_frame)
    GoogleDriveTab(drive_tab_frame)

    root.mainloop()